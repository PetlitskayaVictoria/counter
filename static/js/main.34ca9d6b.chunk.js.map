{"version":3,"sources":["components/Buttons/ButtonElement/ButtonElement.module.css","components/Counter/CounterContainer/CounterContainer.module.css","components/Settings/SettingsContainer/SettingsContainer.tsx","components/Buttons/ButtonElement/ButtonElement.tsx","app/app-reducer.ts","components/Settings/Settings.tsx","components/Counter/CounterContainer/CounterContainer.tsx","components/Counter/Counter.tsx","app/App.tsx","reportWebVitals.ts","app/store.ts","index.tsx","components/Container.module.css","components/Settings/SettingsContainer/SettingsContainer.module.css"],"names":["module","exports","SettingsContainer","props","className","classes","settingsContainer","valueSettingsContainer","type","value","maxValue","onChange","maxValueOnChange","startValue","error","startValueOnChange","ButtonElement","buttonContainer","buttonStyle","disabled","onClick","onClickCallBack","title","initialState","counterValue","showHint","setInitialValuesAC","SET_VALUES","payload","setCounterValueAC","SET_COUNTER_VALUE","showHintAC","SHOW_HINT","SET_ERROR","Settings","dispatch","useDispatch","useEffect","setLocalStartValue","setLocalMaxValue","useState","localStartValue","localMaxValue","container","contentContainer","e","newStartValue","Number","currentTarget","toggleError","newMaxValue","buttonsContainer","setValuesToLocalStorage","setValueSettings","CounterContainer","messageText","red","Counter","inc","reset","App","startValueFromLocalStorageAsString","localStorage","getItem","maxValueFromLocalStorageAsString","localStorageStartValue","JSON","parse","localStorageMaxValue","useSelector","state","app","toggleErrorAC","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34ca9d6b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonStyle\":\"ButtonElement_buttonStyle__kzh7H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterContainer\":\"CounterContainer_counterContainer__2B20k\",\"red\":\"CounterContainer_red__3ugED\"};","import React, {ChangeEvent} from 'react';\nimport classes from './SettingsContainer.module.css'\n\ntype SettingsContainerType = {\n    startValue: number\n    maxValue: number\n    startValueOnChange: (e: ChangeEvent<HTMLInputElement>) => void\n    maxValueOnChange: (e: ChangeEvent<HTMLInputElement>) => void\n}\n\nfunction SettingsContainer(props: SettingsContainerType) {\n\n    return (\n        <div className={classes.settingsContainer}>\n            <div className={classes.valueSettingsContainer}>\n                <span>Max value:</span>\n                <input type=\"number\"\n                       value={props.maxValue}\n                       onChange={props.maxValueOnChange}\n                       className={props.startValue >= props.maxValue || props.maxValue < 0 ? classes.error : \"\"}\n                />\n            </div>\n            <div className={classes.valueSettingsContainer}>\n                <span>Start value:</span>\n                <input type=\"number\"\n                       value={props.startValue}\n                       onChange={props.startValueOnChange}\n                       className={props.startValue >= props.maxValue || props.startValue < 0 ? classes.error : \"\"}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default SettingsContainer;\n","import React from 'react';\nimport classes from './ButtonElement.module.css'\n\ntype ButtonsType = {\n    title: string\n    disabled: boolean\n    onClickCallBack: () => void\n}\n\nexport function ButtonElement(props: ButtonsType) {\n\n    return (\n        <div className={classes.buttonContainer}>\n            <button className={classes.buttonStyle}\n                    disabled={props.disabled}\n                    onClick={props.onClickCallBack}> {props.title} </button>\n        </div>\n    );\n}\n\n","\nconst initialState = {\n    startValue: 0,\n    maxValue: 5,\n    counterValue: 0,\n    showHint: false,\n    error: false\n}\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case \"SET_VALUES\": return {...state, ...action.payload}\n        case \"SET_COUNTER_VALUE\": return {...state, ...action.payload}\n        case \"SET_ERROR\": return {...state, ...action.payload}\n        case \"SHOW_HINT\": return {...state, ...action.payload}\n        default:\n            return {...state}\n    }\n}\n\nexport const setInitialValuesAC = (startValue: number, maxValue: number) => ({\n    type: SET_VALUES,\n    payload: {\n        startValue, maxValue\n    }\n} as const)\nexport const setCounterValueAC = (counterValue: number) => ({\n    type: SET_COUNTER_VALUE,\n    payload: {\n        counterValue\n    }\n} as const)\nexport const toggleErrorAC = (error: boolean) => ({\n    type: SET_ERROR, payload: {error}\n} as const)\nexport const showHintAC = (showHint: boolean) => ({\n    type: SHOW_HINT, payload: {showHint}\n} as const)\n\ntype InitialStateType = {\n    startValue: number\n    maxValue: number\n    counterValue: number\n    showHint: boolean\n    error: boolean\n}\n\nconst SET_VALUES = \"SET_VALUES\"\nconst SET_COUNTER_VALUE = \"SET_COUNTER_VALUE\"\nconst SET_ERROR = \"SET_ERROR\"\nconst SHOW_HINT = \"SHOW_HINT\"\n\ntype ActionsTypes =\n    | ReturnType<typeof setInitialValuesAC>\n    | ReturnType<typeof setCounterValueAC>\n    | ReturnType<typeof toggleErrorAC>\n    | ReturnType<typeof showHintAC>\n","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport SettingsContainer from \"./SettingsContainer/SettingsContainer\";\nimport {ButtonElement} from \"../Buttons/ButtonElement/ButtonElement\";\nimport classes from './../Container.module.css'\nimport {useDispatch} from \"react-redux\";\nimport {showHintAC} from \"../../app/app-reducer\";\n\n\ntype SettingsType = {\n    setValueSettings: (startValue: number, maxValue: number) => void\n    startValue: number\n    maxValue: number\n    toggleError: (value: boolean) => void\n    error: boolean\n    setValuesToLocalStorage: (startValue: number, maxValue: number) => void\n}\n\nfunction Settings(props: SettingsType) {\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        setLocalStartValue(props.startValue)\n        setLocalMaxValue(props.maxValue)\n    }, [props.startValue, props.maxValue])\n\n    let [localStartValue, setLocalStartValue] = useState<number>(props.startValue)\n    let [localMaxValue, setLocalMaxValue] = useState<number>(props.maxValue)\n\n    const startValueOnChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const newStartValue = Number(e.currentTarget.value)\n        if(newStartValue < 0) props.toggleError(true)\n        if(newStartValue === localMaxValue) props.toggleError(true)\n        if(props.error && newStartValue === 0) props.toggleError(false)\n        if(props.error && localMaxValue > newStartValue) props.toggleError(false)\n        setLocalStartValue(newStartValue)\n        dispatch(showHintAC(true))\n    }\n\n    const maxValueOnChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const newMaxValue = Number(e.currentTarget.value)\n        if(newMaxValue === localStartValue) props.toggleError(true)\n        if(props.error && newMaxValue > localStartValue) props.toggleError(false)\n        setLocalMaxValue(newMaxValue)\n        dispatch(showHintAC(true))\n    }\n\n\n    const setValueSettings = () => {\n        props.setValuesToLocalStorage(localStartValue, localMaxValue)\n        props.setValueSettings(localStartValue, localMaxValue)\n        dispatch(showHintAC(false))\n    }\n\n    return (\n        <div className={classes.container}>\n            <div className={classes.contentContainer}>\n                <SettingsContainer startValue={localStartValue}\n                                   maxValue={localMaxValue}\n                                   startValueOnChange={startValueOnChange}\n                                   maxValueOnChange={maxValueOnChange}\n                />\n\n            </div>\n            <div className={classes.buttonsContainer}>\n                <ButtonElement title={\"SET\"}\n                               disabled={props.error}\n                               onClickCallBack={setValueSettings}/>\n            </div>\n        </div>\n    )\n}\n\nexport default Settings\n","import React from 'react';\nimport classes from './CounterContainer.module.css'\n\ntype CounterType = {\n    counterValue: number\n    maxValue: number\n    startValue: number\n    error: boolean\n    showHint: boolean\n}\n\nfunction CounterContainer(props: CounterType) {\n\n    const messageText = props.error ? \"Incorrect value!\" : props.showHint ? \"enter values and press 'set'\" : props.counterValue\n\n    return (\n    <div>\n      <div>\n            <span className={((props.counterValue === props.maxValue || props.error) ? classes.red : \"\")}>\n                {messageText}\n            </span>\n      </div>\n    </div>\n  );\n}\n\nexport default CounterContainer;\n","import React from 'react';\nimport CounterContainer from \"./CounterContainer/CounterContainer\";\nimport {ButtonElement} from \"../Buttons/ButtonElement/ButtonElement\";\nimport classes from './../Container.module.css'\n\ntype CounterType = {\n    counterValue: number\n    maxValue: number\n    startValue: number\n    reset: () => void\n    inc: () => void\n    error: boolean\n    showHint: boolean\n}\n\nfunction Counter(props: CounterType) {\n    const reset = () => {\n        props.reset()\n    }\n\n    const inc = () => {\n        props.inc()\n    }\n\n    return (\n        <div className={classes.container}>\n            <div className={classes.contentContainer}>\n                <CounterContainer counterValue={props.counterValue}\n                                  maxValue={props.maxValue}\n                                  startValue={props.startValue}\n                                  error={props.error}\n                                  showHint={props.showHint}\n                />\n            </div>\n            <div className={classes.buttonsContainer}>\n                <ButtonElement title={\"inc\"}\n                               disabled={props.counterValue === props.maxValue || props.error}\n                               onClickCallBack={inc} />\n                <ButtonElement title={\"reset\"}\n                               disabled={props.counterValue === props.startValue || props.error}\n                               onClickCallBack={reset}/>\n            </div>\n        </div>\n    )\n}\n\nexport default Counter\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport Settings from \"../components/Settings/Settings\";\nimport Counter from '../components/Counter/Counter';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setCounterValueAC, setInitialValuesAC, toggleErrorAC} from \"./app-reducer\";\nimport {AppRootStateType} from \"./store\";\n\nfunction App() {\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        let startValueFromLocalStorageAsString: string | null  = localStorage.getItem('startValue')\n        let maxValueFromLocalStorageAsString: string | null = localStorage.getItem('maxValue')\n        if (startValueFromLocalStorageAsString && maxValueFromLocalStorageAsString) {\n            let localStorageStartValue = JSON.parse(startValueFromLocalStorageAsString)\n            let localStorageMaxValue = JSON.parse(maxValueFromLocalStorageAsString)\n            dispatch(setInitialValuesAC(localStorageStartValue, localStorageMaxValue))\n            dispatch(setCounterValueAC(localStorageStartValue))\n        }\n    }, [])\n\n    const counterValue = useSelector<AppRootStateType, number>((state) => state.app.counterValue)\n    const startValue =  useSelector<AppRootStateType, number>((state) => state.app.startValue)\n    const maxValue = useSelector<AppRootStateType, number>((state) => state.app.maxValue)\n    const error = useSelector<AppRootStateType, boolean>((state) => state.app.error)\n    const showHint = useSelector<AppRootStateType, boolean>((state) => state.app.showHint)\n\n    const toggleError = (value: boolean) => {\n        dispatch(toggleErrorAC(value))\n    }\n    const setValueSettings = (startValue: number, maxValue: number) => {\n        dispatch(setInitialValuesAC(startValue, maxValue))\n        dispatch(setCounterValueAC(startValue))\n    }\n    const setValuesToLocalStorage = (startValue: number, maxValue: number) => {\n        localStorage.setItem('startValue', JSON.stringify(startValue))\n        localStorage.setItem('maxValue', JSON.stringify(maxValue))\n    }\n    const inc = () => {\n            dispatch(setCounterValueAC(counterValue + 1))\n    }\n    const reset = () => {\n        dispatch(setCounterValueAC(startValue))\n    }\n\n    return (\n        <div className=\"App\">\n            <Settings startValue={startValue}\n                      maxValue={maxValue}\n                      setValueSettings={setValueSettings}\n                      toggleError={toggleError}\n                      error={error}\n                      setValuesToLocalStorage={setValuesToLocalStorage}\n            />\n            <Counter counterValue={counterValue}\n                     maxValue={maxValue}\n                     startValue={startValue}\n                     reset={reset} inc={inc}\n                     error={error}\n                     showHint={showHint}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from 'redux'\nimport {appReducer} from \"./app-reducer\";\n\nconst rootReducer = combineReducers({\n    app: appReducer\n})\n\nexport const store = createStore(rootReducer);\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport {store} from \"./app/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2SuD_\",\"contentContainer\":\"Container_contentContainer__3GEyW\",\"buttonsContainer\":\"Container_buttonsContainer__2lfik\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsContainer\":\"SettingsContainer_settingsContainer__2tf1o\",\"valueSettingsContainer\":\"SettingsContainer_valueSettingsContainer__ve_m2\",\"error\":\"SettingsContainer_error__3mCeZ\"};"],"sourceRoot":""}