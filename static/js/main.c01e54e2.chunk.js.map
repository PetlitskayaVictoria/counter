{"version":3,"sources":["components/Container.module.css","components/Settings/SettingsContainer/SettingsContainer.module.css","components/Buttons/ButtonElement/ButtonElement.module.css","components/Counter/CounterContainer/CounterContainer.module.css","components/Settings/SettingsContainer/SettingsContainer.tsx","components/Buttons/ButtonElement/ButtonElement.tsx","components/Settings/Settings.tsx","components/Counter/CounterContainer/CounterContainer.tsx","components/Counter/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","SettingsContainer","props","className","classes","settingsContainer","valueSettingsContainer","type","value","maxValue","onChange","maxValueOnChange","startValue","error","startValueOnChange","ButtonElement","buttonContainer","buttonStyle","disabled","onClick","onClickCallBack","title","Settings","useState","setStartValue","setMaxValue","container","contentContainer","e","newStartValue","Number","currentTarget","toggleError","setShowHint","newMaxValue","buttonsContainer","setValuesToLocalStorage","setValueSettings","CounterContainer","messageText","showHint","counterValue","red","Counter","inc","reset","App","startValueFromLocalStorageAsString","localStorage","getItem","startValueFromLocalStorageAsNumber","JSON","parse","maxValueFromLocalStorageAsString","maxValueFromLocalStorageAsNumber","setCounterValue","setError","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c01e54e2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2SuD_\",\"contentContainer\":\"Container_contentContainer__3GEyW\",\"buttonsContainer\":\"Container_buttonsContainer__2lfik\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsContainer\":\"SettingsContainer_settingsContainer__2tf1o\",\"valueSettingsContainer\":\"SettingsContainer_valueSettingsContainer__ve_m2\",\"error\":\"SettingsContainer_error__3mCeZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonStyle\":\"ButtonElement_buttonStyle__kzh7H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterContainer\":\"CounterContainer_counterContainer__2B20k\",\"red\":\"CounterContainer_red__3ugED\"};","import React, {ChangeEvent} from 'react';\nimport classes from './SettingsContainer.module.css'\n\ntype SettingsContainerType = {\n    startValue: number\n    maxValue: number\n    startValueOnChange: (e: ChangeEvent<HTMLInputElement>) => void\n    maxValueOnChange: (e: ChangeEvent<HTMLInputElement>) => void\n}\n\nfunction SettingsContainer(props: SettingsContainerType) {\n\n    return (\n        <div className={classes.settingsContainer}>\n            <div className={classes.valueSettingsContainer}>\n                <span>Max value:</span>\n                <input type=\"number\"\n                       value={props.maxValue}\n                       onChange={props.maxValueOnChange}\n                       className={props.startValue >= props.maxValue || props.maxValue < 0 ? classes.error : \"\"}\n                />\n            </div>\n            <div className={classes.valueSettingsContainer}>\n                <span>Start value:</span>\n                <input type=\"number\"\n                       value={props.startValue}\n                       onChange={props.startValueOnChange}\n                       className={props.startValue >= props.maxValue || props.startValue < 0 ? classes.error : \"\"}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default SettingsContainer;\n","import React from 'react';\nimport classes from './ButtonElement.module.css'\n\ntype ButtonsType = {\n    title: string\n    disabled: boolean\n    onClickCallBack: () => void\n}\n\nexport function ButtonElement(props: ButtonsType) {\n\n    return (\n        <div className={classes.buttonContainer}>\n            <button className={classes.buttonStyle}\n                    disabled={props.disabled}\n                    onClick={props.onClickCallBack}> {props.title} </button>\n        </div>\n    );\n}\n\n","import React, {ChangeEvent, useState} from 'react';\nimport SettingsContainer from \"./SettingsContainer/SettingsContainer\";\nimport {ButtonElement} from \"../Buttons/ButtonElement/ButtonElement\";\nimport classes from './../Container.module.css'\n\ntype SettingsType = {\n    setValueSettings: (startValue: number, maxValue: number) => void\n    startValue: number\n    maxValue: number\n    toggleError: (value: boolean) => void\n    error: boolean\n    setShowHint: (value: boolean) => void\n    setValuesToLocalStorage: (startValue: number, maxValue: number) => void\n}\n\nfunction Settings(props: SettingsType) {\n\n    let [startValue, setStartValue] = useState<number>(props.startValue)\n    let [maxValue, setMaxValue] = useState<number>(props.maxValue)\n\n    const startValueOnChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const newStartValue = Number(e.currentTarget.value)\n        if(newStartValue < 0) props.toggleError(true)\n        if(newStartValue === maxValue) props.toggleError(true)\n        if(props.error && newStartValue === 0) props.toggleError(false)\n        if(props.error && maxValue > newStartValue) props.toggleError(false)\n        setStartValue(newStartValue)\n        props.setShowHint(true)\n    }\n\n    const maxValueOnChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const newMaxValue = Number(e.currentTarget.value)\n        if(newMaxValue === startValue) props.toggleError(true)\n        if(props.error && newMaxValue > startValue) props.toggleError(false)\n        setMaxValue(newMaxValue)\n        props.setShowHint(true)\n    }\n\n\n    const setValueSettings = () => {\n        props.setValuesToLocalStorage(startValue, maxValue)\n        props.setValueSettings(startValue, maxValue)\n        props.setShowHint(false)\n    }\n\n    return (\n        <div className={classes.container}>\n            <div className={classes.contentContainer}>\n                <SettingsContainer startValue={startValue}\n                                   maxValue={maxValue}\n                                   startValueOnChange={startValueOnChange}\n                                   maxValueOnChange={maxValueOnChange}\n                />\n\n            </div>\n            <div className={classes.buttonsContainer}>\n                <ButtonElement title={\"SET\"}\n                               disabled={props.error}\n                               onClickCallBack={setValueSettings}/>\n            </div>\n        </div>\n    )\n}\n\nexport default Settings\n","import React from 'react';\nimport classes from './CounterContainer.module.css'\n\ntype CounterType = {\n    counterValue: number\n    maxValue: number\n    startValue: number\n    error: boolean\n    showHint: boolean\n}\n\nfunction CounterContainer(props: CounterType) {\n\n    const messageText = props.error ? \"Incorrect value!\" : props.showHint ? \"enter values and press 'set'\" : props.counterValue\n\n  return (\n    <div>\n      <div>\n            <span className={((props.counterValue === props.maxValue || props.error) ? classes.red : \"\")}>\n                {messageText}\n            </span>\n      </div>\n    </div>\n  );\n}\n\nexport default CounterContainer;\n","import React from 'react';\nimport CounterContainer from \"./CounterContainer/CounterContainer\";\nimport {ButtonElement} from \"../Buttons/ButtonElement/ButtonElement\";\nimport classes from './../Container.module.css'\n\ntype CounterType = {\n    counterValue: number\n    maxValue: number\n    startValue: number\n    reset: () => void\n    inc: () => void\n    error: boolean\n    showHint: boolean\n}\n\nfunction Counter(props: CounterType) {\n    const reset = () => {\n        props.reset()\n    }\n\n    const inc = () => {\n        props.inc()\n    }\n\n    return (\n        <div className={classes.container}>\n            <div className={classes.contentContainer}>\n                <CounterContainer counterValue={props.counterValue}\n                                  maxValue={props.maxValue}\n                                  startValue={props.startValue}\n                                  error={props.error}\n                                  showHint={props.showHint}\n                />\n            </div>\n            <div className={classes.buttonsContainer}>\n                <ButtonElement title={\"inc\"}\n                               disabled={props.counterValue === props.maxValue || props.error}\n                               onClickCallBack={inc} />\n                <ButtonElement title={\"reset\"}\n                               disabled={props.counterValue === props.startValue || props.error}\n                               onClickCallBack={reset}/>\n            </div>\n        </div>\n    )\n}\n\nexport default Counter\n","import React, {useState} from 'react';\nimport './App.css';\nimport Settings from \"./components/Settings/Settings\";\nimport Counter from './components/Counter/Counter';\n\nfunction App() {\n    let startValueFromLocalStorageAsString: string | null  = localStorage.getItem('startValue')\n    let startValueFromLocalStorageAsNumber: number | null = startValueFromLocalStorageAsString ? JSON.parse(startValueFromLocalStorageAsString) : null\n    let maxValueFromLocalStorageAsString: string | null  = localStorage.getItem('maxValue')\n    let maxValueFromLocalStorageAsNumber: number | null = maxValueFromLocalStorageAsString ? JSON.parse(maxValueFromLocalStorageAsString) : null\n\n    let [startValue, setStartValue] = useState<number>(startValueFromLocalStorageAsNumber ? startValueFromLocalStorageAsNumber : 0)\n    let [maxValue, setMaxValue] = useState<number>(maxValueFromLocalStorageAsNumber ? maxValueFromLocalStorageAsNumber : 5)\n    let [counterValue, setCounterValue] = useState<number>(startValue)\n    let [showHint, setShowHint] = useState(false)\n    let [error, setError] = useState(false)\n    const toggleError = (value: boolean) => {\n        setError(value)\n    }\n\n    const setValueSettings = (startValue: number, maxValue: number) => {\n        setStartValue(startValue)\n        setMaxValue(maxValue)\n        setCounterValue(startValue)\n    }\n\n    const setValuesToLocalStorage = (startValue: number, maxValue: number) => {\n        localStorage.setItem('startValue', JSON.stringify(startValue))\n        localStorage.setItem('maxValue', JSON.stringify(maxValue))\n    }\n\n    const inc = () => {\n            setCounterValue(counterValue + 1)\n    }\n    const reset = () => {\n        setCounterValue(startValue)\n    }\n\n\n    return (\n        <div className=\"App\">\n            <Settings startValue={startValue}\n                      maxValue={maxValue}\n                      setValueSettings={setValueSettings}\n                      toggleError={toggleError}\n                      error={error}\n                      setShowHint={setShowHint}\n                      setValuesToLocalStorage={setValuesToLocalStorage}\n            />\n            <Counter counterValue={counterValue}\n                     maxValue={maxValue}\n                     startValue={startValue}\n                     reset={reset} inc={inc}\n                     error={error}\n                     showHint={showHint}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}